name: assignment3
on:
  push
jobs:
  # 1st job build creates the image
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set date
        run: echo "DATE=$(date -Iminutes)" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build_image
        run: docker build -t dishes_meals:latest .
      - name: save image as tar file
        run: docker save dishes_meals:latest -o dishes_meals.tar
      - name: Upload image tar as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dishes_meals_img
          path: dishes_meals.tar
      - name: set up log file
        if: always()
        run: |
          echo ${{ env.DATE }} >> log.txt
          echo "Roni Milstein" >> log.txt
      - name: Update log for successful job
        if: success()
        run: echo "image successfully built" >> log.txt
      - name: Update log for failed job
        if: failure()
        run: echo "image not able to be built" >> log.txt
      - name: Upload log file as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: log
          path: log.txt

  # 2nd job test performs tests using pytest

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    - name: load img
      run: docker load --input artifacts/dishes_meals_img/dishes_meals.tar
    - name: check dishes_meals image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -d -p8000:8000 --name dishes_meals_container dishes_meals &
      #############################################################
    - name: check container is running
      id: check_container
      run: |
        container_status=$(docker ps -q --filter ancestor=dishes_meals)
        container_name=$(docker inspect -f '{{.Name}}' $container_status)
        echo "STATUS=$(container_status) >> $GITHUB_ENV
        echo "NAME=$(container_name) >> $GITHUB_ENV
#        echo "::set-output name=status::$container_status"
#        echo "::set-output name=name::$container_name"
    - name: Fail if container is not running
      run: exit 1
      if: ${{ env.STATUS == '' }}
      #############################################################
    - name: update log with failed to run container
      if: failure()
      run: echo "Container failed to run" >> artifacts/log/log.txt
    - name: update log with successfully ran container
      if: success()
      run: echo "Container up and running" >> artifacts/log/log.txt
    - name: set up python
      uses: actions/setup-python@v4
    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: test with pytest
      run: |
        cd tests
        pytest -v assn3_tests.py > assn3_test_results.txt
    - name: update log with failed test result
      if: failure()
      run: echo "tests failed" >> artifacts/log/log.txt
    - name: update log with successful test result
      if: success()
      run: echo "tests succeeded" >> artifacts/log/log.txt
    - name: upload image as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: dishes_meals_img
        path: artifacts/dishes_meals_img/dishes_meals.tar
    - name: upload test results as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test_results
        path: tests/assn3_test_results.txt
    - name: upload updated log as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log
        path: artifacts/log/log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: load img
        run: docker load --input artifacts/dishes_meals_img/dishes_meals.tar
      - name: check dishes_meals image is loaded
        run: docker image ls
      - name: run image in container
        run: docker run -p8000:8000 dishes_meals &
      - name: check container is running
        run: docker ps
      - name: check query.txt exists
        run: ls query.txt
      - name: read query.txt file
        run: cat query.txt
      - name: Process query.txt and generate response.txt
        run: |
          while IFS= read -r dish || [ -n "$dish" ]; do
            dish_id=$(curl --location --request POST "http://127.0.0.1:8000/dishes" \
                      --header 'Content-Type: application/json' \
                      --data-raw "{\"name\":\"$dish\"}")
            dish_data=$(curl --location --request GET "http://127.0.0.1:8000/dishes/$dish_id")
            calories=$(echo "$dish_data" | jq -r '.cal')
            sodium=$(echo "$dish_data" | jq -r '.sodium')
            sugar=$(echo "$dish_data" | jq -r '.sugar')
            echo "$dish contains $calories calories, $sodium mgs of sodium, and $sugar grams of sugar" >> response.txt
          done < query.txt
      - name: upload updated log as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: log
          path: artifacts/log/log.txt
      - name: upload test results as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test_results
          path: artifacts/test_results/assn3_test_results.txt
      - name: upload response txt as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: response
          path: response.txt











